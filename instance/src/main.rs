use clap::{Arg, App};

fn main() {
    let matches = App::new("Pulsar Functions WASM instance")
        .arg(Arg::with_name("function_details")
            .long("function_details")
            .required(true)
            .takes_value(true))
            .help("Function Details Json String")
        .arg(Arg::with_name("wasm")
            .long("wasm")
            .help("Full Path of Function Code File")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("instance_id")
            .long("instance_id")
            .help("Instance Id")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("function_id")
            .long("function_id")
            .help("Function Id")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("function_version")
            .long("function_version")
            .help("Function Version")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("pulsar_serviceurl")
            .long("pulsar_serviceurl")
            .help("Pulsar Service Url")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("port")
            .long("port")
            .help("Instance Port")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("metrics_port")
            .long("metrics_port")
            .help("Port metrics will be exposed on")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("max_buffered_tuples")
            .long("max_buffered_tuples")
            .help("Maximum number of Buffered tuples")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("logging_directory")
            .long("logging_directory")
            .help("Logging Directory")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("logging_file")
            .long("logging_file")
            .help("Log file name")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("logging_config_file")
            .long("logging_config_file")
            .help("Config file for logging")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("expected_healthcheck_interval")
            .long("expected_healthcheck_interval")
            .help("Expected time in seconds between health checks")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("cluster_name")
            .long("cluster_name")
            .help("The name of the cluster this instance is running on")
            .required(true)
            .takes_value(true))
        .arg(Arg::with_name("secrets_provider")
            .long("secrets_provider")
            .help("The classname of the secrets provider")
            .required(false)
            .takes_value(true))
        .arg(Arg::with_name("secrets_provider_config")
            .long("secrets_provider_config")
            .help("The config that needs to be passed to secrets provider")
            .required(false)
            .takes_value(true))
        .arg(Arg::with_name("state_storage_serviceurl")
            .long("state_storage_serviceurl")
            .help("Managed State Storage Service Url")
            .required(false)
            .takes_value(true))
        .arg(Arg::with_name("client_auth_plugin")
            .long("client_auth_plugin")
            .help("Client authentication plugin")
            .required(false)
            .takes_value(true))
        .arg(Arg::with_name("client_auth_params")
            .long("client_auth_params")
            .help("Client authentication params")
            .required(false)
            .takes_value(true))
        .arg(Arg::with_name("use_tls")
            .long("use_tls")
            .help("Use tls")
            .required(false))
        .arg(Arg::with_name("tls_allow_insecure_connection")
            .long("tls_allow_insecure_connection")
            .help("Tls allow insecure connection")
            .required(false))
        .arg(Arg::with_name("hostname_verification_enabled")
            .long("hostname_verification_enabled")
            .help("Enable hostname verification")
            .required(false))
        .arg(Arg::with_name("tls_trust_cert_path")
            .long("tls_trust_cert_path")
            .help("Tls trust cert file path")
            .required(false)
            .takes_value(true))
        .get_matches();
}
